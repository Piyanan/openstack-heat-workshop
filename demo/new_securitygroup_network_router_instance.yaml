heat_template_version: newton

description: >
    HOT Templete to create new network, router, security group , and
    new instance that associates with all above along with floating ip

parameters:
    network_name:
        type: string
        description: Name of private network to be created
        default: demo-network
    network_cidr:
        type: string
        description: Private network address (CIDR notation)
        default: 192.168.1.0/24
    subnet_name:
        type: string
        description: Name of subnet to be created
        default: 192.168.1-subnet
    allocation_pools_start:
        type: string
        description: Start of private network pool
        default: 192.168.1.11
    allocation_pools_end:
        type: string
        description: End of private network pool
        default: 192.168.1.250
    network_gateway:
        type: string
        description: Gateway IP of private network
        default: 192.168.1.1
    network_dns_nameservers:
        type: comma_delimited_list
        description: List of DNS Nameservers
        default: 8.8.8.8,8.8.4.4
    public_network:
        type: string
        description: Name of public network to allocate floating ips
        default: external-network
    router_name:
        type: string
        description: Name of router to be created
        default: demo-router
    security_group_name:
        type: string
        description: Name of security group to be created
        default: ping-ssh
    instance_name:
        type: string
        description: Name of instance to be created
        default: test-heat
    key_name:
        type: string
        description: Keyname to be paired with new instance
        default: root-aio
    image_name:
        type: string
        description: Name of image to use for instance creation
        default: cirros-0.3.4-x86_64
    flavor_name:
        type: string
        description: Name of flavor to use for instance creation
        default: c1.m1

resources:
    network:
        type: OS::Neutron::Net
        properties:
            name: { get_param: network_name }

    subnet:
        type: OS::Neutron::Subnet
        properties:
            network: { get_resource: network }
            cidr: { get_param: network_cidr }
            name: { get_param: subnet_name }
            allocation_pools:
                - start: { get_param: allocation_pools_start }
                  end: { get_param: allocation_pools_end }
            gateway_ip: { get_param: network_gateway }
            dns_nameservers: { get_param: network_dns_nameservers }

    router:
        type: OS::Neutron::Router
        properties:
            name: { get_param: router_name }
            external_gateway_info:
                network: { get_param: public_network }

    router_interface:
        type: OS::Neutron::RouterInterface
        properties:
            router: { get_resource: router }
            subnet: { get_resource: subnet }

    security_group:
        type: OS::Neutron::SecurityGroup
        properties:
            name: { get_param: security_group_name }
            rules:
                - remote_ip_prefix: 0.0.0.0/0
                  protocol: tcp
                  port_range_min: 22
                  port_range_max: 22
                - remote_ip_prefix: 0.0.0.0/0
                  protocol: icmp

    instance:
        type: OS::Nova::Server
        properties:
            name: { get_param: instance_name }
            key_name: { get_param: key_name }
            image: { get_param: image_name }
            flavor: { get_param: flavor_name }
            networks:
                - port: { get_resource: instance_port }

    instance_port:
        type: OS::Neutron::Port
        properties:
            network_id: { get_resource: network }
            fixed_ips:
                - subnet: { get_resource: subnet }
            security_groups: [{ get_resource: security_group }]

    instance_floating_ip:
        type: OS::Neutron::FloatingIP
        properties:
            floating_network: { get_param: public_network }
            port_id: { get_resource: instance_port }
